
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008a  0080008a  000007ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f4  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099e  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b30  00000000  00000000  00002c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00003738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e23  00000000  00000000  00003e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3c 02 	call	0x478	; 0x478 <main>
  8a:	0c 94 96 03 	jmp	0x72c	; 0x72c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDir>:
		PORTC = Val;
		
		break;
		
		case  DIO_PORTD :
		PORTD = Val;
  92:	44 23       	and	r20, r20
  94:	b9 f1       	breq	.+110    	; 0x104 <DIO_SetPinDir+0x72>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	09 f0       	breq	.+2      	; 0x9c <DIO_SetPinDir+0xa>
  9a:	6b c0       	rjmp	.+214    	; 0x172 <DIO_SetPinDir+0xe0>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	89 f0       	breq	.+34     	; 0xc2 <DIO_SetPinDir+0x30>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPinDir+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	c9 f0       	breq	.+50     	; 0xd8 <DIO_SetPinDir+0x46>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	11 f1       	breq	.+68     	; 0xee <DIO_SetPinDir+0x5c>
  aa:	08 95       	ret
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x22>
  bc:	82 2b       	or	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
  c2:	27 b3       	in	r18, 0x17	; 23
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x3c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x38>
  d2:	82 2b       	or	r24, r18
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x52>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x4e>
  e8:	82 2b       	or	r24, r18
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	08 95       	ret
  ee:	21 b3       	in	r18, 0x11	; 17
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x68>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x64>
  fe:	82 2b       	or	r24, r18
 100:	81 bb       	out	0x11, r24	; 17
 102:	08 95       	ret
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 f0       	breq	.+36     	; 0x12c <DIO_SetPinDir+0x9a>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_SetPinDir+0x82>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	d9 f0       	breq	.+54     	; 0x144 <DIO_SetPinDir+0xb2>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	29 f1       	breq	.+74     	; 0x15c <DIO_SetPinDir+0xca>
 112:	08 95       	ret
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x8e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x8a>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	08 95       	ret
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDir+0xa6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDir+0xa2>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0xba>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDir+0xd6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDir+0xd2>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPinVal>:
}


void DIO_SetPinVal(TU08 Port , TU08 Pin , TU08 Val)
{
		switch(Val)
 174:	44 23       	and	r20, r20
 176:	b9 f1       	breq	.+110    	; 0x1e6 <DIO_SetPinVal+0x72>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_SetPinVal+0xa>
 17c:	6b c0       	rjmp	.+214    	; 0x254 <DIO_SetPinVal+0xe0>
		{
			case DIO_PIN_HIGH :
			
			switch(Port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	89 f0       	breq	.+34     	; 0x1a4 <DIO_SetPinVal+0x30>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPinVal+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	c9 f0       	breq	.+50     	; 0x1ba <DIO_SetPinVal+0x46>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	11 f1       	breq	.+68     	; 0x1d0 <DIO_SetPinVal+0x5c>
 18c:	08 95       	ret
			{
				case DIO_PORTA :
				SET_BIT(PORTA,Pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPinVal+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPinVal+0x22>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
				break;
 1a2:	08 95       	ret
				
				case DIO_PORTB :
				SET_BIT(PORTB,Pin);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinVal+0x3c>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinVal+0x38>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24
				break;
 1b8:	08 95       	ret
				
				case DIO_PORTC :
				SET_BIT(PORTC,Pin);
 1ba:	25 b3       	in	r18, 0x15	; 21
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SetPinVal+0x52>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SetPinVal+0x4e>
 1ca:	82 2b       	or	r24, r18
 1cc:	85 bb       	out	0x15, r24	; 21
				break;
 1ce:	08 95       	ret
				
				case DIO_PORTD :
				SET_BIT(PORTD,Pin);
 1d0:	22 b3       	in	r18, 0x12	; 18
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinVal+0x68>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinVal+0x64>
 1e0:	82 2b       	or	r24, r18
 1e2:	82 bb       	out	0x12, r24	; 18
				break;
 1e4:	08 95       	ret
			
			break;
			
			case DIO_PIN_LOW :
			
			switch(Port)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 f0       	breq	.+36     	; 0x20e <DIO_SetPinVal+0x9a>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_SetPinVal+0x82>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d9 f0       	breq	.+54     	; 0x226 <DIO_SetPinVal+0xb2>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	29 f1       	breq	.+74     	; 0x23e <DIO_SetPinVal+0xca>
 1f4:	08 95       	ret
			{
				case DIO_PORTA :
				CLR_BIT(PORTA,Pin);
 1f6:	2b b3       	in	r18, 0x1b	; 27
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPinVal+0x8e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPinVal+0x8a>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8b bb       	out	0x1b, r24	; 27
				break;
 20c:	08 95       	ret
				
				case DIO_PORTB :
				CLR_BIT(PORTB,Pin);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinVal+0xa6>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinVal+0xa2>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	88 bb       	out	0x18, r24	; 24
				break;
 224:	08 95       	ret
				
				case DIO_PORTC :
				CLR_BIT(PORTC,Pin);
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinVal+0xbe>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPinVal+0xba>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	85 bb       	out	0x15, r24	; 21
				break;
 23c:	08 95       	ret
				
				case DIO_PORTD :
				CLR_BIT(PORTD,Pin);
 23e:	22 b3       	in	r18, 0x12	; 18
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_SetPinVal+0xd6>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_SetPinVal+0xd2>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_WriteCommand>:
	
	#endif
}

void LCD_WriteCommand(TU08 cmd)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN ,  DIO_PIN_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
	
	PORTA = (cmd & 0xf0) | (PORTA & 0x0f);
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	89 ef       	ldi	r24, 0xF9	; 249
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WriteCommand+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WriteCommand+0x42>
 298:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
	
	PORTA= (cmd << 4) | (PORTA & 0x0f);
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	30 e1       	ldi	r19, 0x10	; 16
 2a8:	c3 9f       	mul	r28, r19
 2aa:	c0 01       	movw	r24, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	92 2f       	mov	r25, r18
 2b0:	9f 70       	andi	r25, 0x0F	; 15
 2b2:	89 2b       	or	r24, r25
 2b4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
 2c0:	89 ef       	ldi	r24, 0xF9	; 249
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_WriteCommand+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_WriteCommand+0x74>
 2ca:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
 2d6:	81 ee       	ldi	r24, 0xE1	; 225
 2d8:	94 e0       	ldi	r25, 0x04	; 4
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_WriteCommand+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_WriteCommand+0x8a>
 2e0:	00 00       	nop
	
	
	_delay_ms(5);
}
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <LCD_Init>:
	/*Return Home*/
	LCD_WriteCommand(0x02);
	
	#elif    LCD_MODE   ==    4
	/*initializing the pins direction in 4-bit mode*/
	DIO_SetPinDir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	
	DIO_SetPinDir(LCD_4BIT_DATA_PORT , D4_PIN , DIO_PIN_OUTPUT);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT , D5_PIN , DIO_PIN_OUTPUT);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT , D6_PIN , DIO_PIN_OUTPUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT , D7_PIN , DIO_PIN_OUTPUT);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 32c:	87 ea       	ldi	r24, 0xA7	; 167
 32e:	91 e6       	ldi	r25, 0x61	; 97
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_Init+0x4a>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_Init+0x50>
 336:	00 00       	nop
	
	_delay_ms(100);
	/*send commands to LCD for initializing as 4-bit mode*/
	LCD_WriteCommand(0x33);
 338:	83 e3       	ldi	r24, 0x33	; 51
 33a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
 33e:	82 e3       	ldi	r24, 0x32	; 50
 340:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
 344:	88 e2       	ldi	r24, 0x28	; 40
 346:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
	
	LCD_WriteCommand(0x0C);
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
	LCD_WriteCommand(0x02);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 362:	08 95       	ret

00000364 <LCD_WriteChar>:
	
	_delay_ms(5);
}

void LCD_WriteChar(TU08 chr)
{
 364:	cf 93       	push	r28
 366:	c8 2f       	mov	r28, r24
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	63 e0       	ldi	r22, 0x03	; 3
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
		
		PORTA = (chr & 0xf0) | (PORTA & 0x0f);
 386:	8b b3       	in	r24, 0x1b	; 27
 388:	9c 2f       	mov	r25, r28
 38a:	90 7f       	andi	r25, 0xF0	; 240
 38c:	8f 70       	andi	r24, 0x0F	; 15
 38e:	89 2b       	or	r24, r25
 390:	8b bb       	out	0x1b, r24	; 27
		 
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH);
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
 39c:	89 ef       	ldi	r24, 0xF9	; 249
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_WriteChar+0x3c>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_WriteChar+0x42>
 3a6:	00 00       	nop
		_delay_ms(1);
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
		
		PORTA = (chr << 4) | (PORTA & 0x0f);
 3b2:	2b b3       	in	r18, 0x1b	; 27
 3b4:	30 e1       	ldi	r19, 0x10	; 16
 3b6:	c3 9f       	mul	r28, r19
 3b8:	c0 01       	movw	r24, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	92 2f       	mov	r25, r18
 3be:	9f 70       	andi	r25, 0x0F	; 15
 3c0:	89 2b       	or	r24, r25
 3c2:	8b bb       	out	0x1b, r24	; 27
		
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH);
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
 3ce:	89 ef       	ldi	r24, 0xF9	; 249
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_WriteChar+0x6e>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_WriteChar+0x74>
 3d8:	00 00       	nop
		_delay_ms(1);
		DIO_SetPinVal(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinVal>
 3e4:	81 ee       	ldi	r24, 0xE1	; 225
 3e6:	94 e0       	ldi	r25, 0x04	; 4
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD_WriteChar+0x84>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCD_WriteChar+0x8a>
 3ee:	00 00       	nop
		
		
		_delay_ms(5);
}
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <LCD_WriteString>:


void LCD_WriteString(TU08* str)
{
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	fc 01       	movw	r30, r24
	TU08 i = 0 ;
	
	while(str[i] != '\0')
 3fc:	80 81       	ld	r24, Z
 3fe:	88 23       	and	r24, r24
 400:	59 f0       	breq	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 402:	8f 01       	movw	r16, r30
 404:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WriteChar(str[i]);
 406:	0e 94 b2 01 	call	0x364	; 0x364 <LCD_WriteChar>
		i++;
 40a:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_WriteString(TU08* str)
{
	TU08 i = 0 ;
	
	while(str[i] != '\0')
 40c:	f8 01       	movw	r30, r16
 40e:	ec 0f       	add	r30, r28
 410:	f1 1d       	adc	r31, r1
 412:	80 81       	ld	r24, Z
 414:	81 11       	cpse	r24, r1
 416:	f7 cf       	rjmp	.-18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		LCD_WriteChar(str[i]);
		i++;
	}
}
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <LCD_GoTo>:


void LCD_GoTo(TU08 row , TU08 col)
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	00 d0       	rcall	.+0      	; 0x426 <LCD_GoTo+0x6>
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
	TU08 pos[2] = {0x80 , 0xc0};
 42a:	90 e8       	ldi	r25, 0x80	; 128
 42c:	99 83       	std	Y+1, r25	; 0x01
 42e:	90 ec       	ldi	r25, 0xC0	; 192
 430:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(pos[row]+col);
 432:	fe 01       	movw	r30, r28
 434:	e8 0f       	add	r30, r24
 436:	f1 1d       	adc	r31, r1
 438:	81 81       	ldd	r24, Z+1	; 0x01
 43a:	86 0f       	add	r24, r22
 43c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
}
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <LCD_Clear>:


void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 450:	08 95       	ret

00000452 <adc_init>:
		}	
    }
}

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));   // 16Mhz/128 = 125Khz the ADC reference clock
 452:	86 b1       	in	r24, 0x06	; 6
 454:	87 60       	ori	r24, 0x07	; 7
 456:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);                            // Voltage reference from Avcc (5v)
 458:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN);                            // Turn on ADC
 45a:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);                            // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 45c:	36 9a       	sbi	0x06, 6	; 6
 45e:	08 95       	ret

00000460 <read_adc>:
}

uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0;                            // Clear the older channel that was read
 460:	97 b1       	in	r25, 0x07	; 7
 462:	90 7f       	andi	r25, 0xF0	; 240
 464:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;                            // Defines the new ADC channel to be read
 466:	97 b1       	in	r25, 0x07	; 7
 468:	89 2b       	or	r24, r25
 46a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);                            // Starts a new conversion
 46c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));                        // Wait until the conversion is done
 46e:	36 99       	sbic	0x06, 6	; 6
 470:	fe cf       	rjmp	.-4      	; 0x46e <read_adc+0xe>
	return ADCW;                                // Returns the ADC value of the chosen channel
 472:	84 b1       	in	r24, 0x04	; 4
 474:	95 b1       	in	r25, 0x05	; 5
 476:	08 95       	ret

00000478 <main>:
uint16_t read_adc(uint8_t channel);    //Function to read an arbitrary analog channel/pin


int main(void)
{
    adc_init();
 478:	0e 94 29 02 	call	0x452	; 0x452 <adc_init>
    LCD_Init();
 47c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Init>
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	40 e7       	ldi	r20, 0x70	; 112
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	21 50       	subi	r18, 0x01	; 1
 488:	40 40       	sbci	r20, 0x00	; 0
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <main+0xe>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <main+0x18>
 490:	00 00       	nop
    _delay_ms(50);
    LCD_Clear();
 492:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_Clear>
    LCD_WriteString("   Direction");
 496:	80 e6       	ldi	r24, 0x60	; 96
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 49e:	8f e3       	ldi	r24, 0x3F	; 63
 4a0:	9c e9       	ldi	r25, 0x9C	; 156
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <main+0x2a>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <main+0x30>
 4a8:	00 00       	nop
    _delay_ms(10);
    LCD_GoTo(1,0);
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
    LCD_WriteString("Speed=");
 4b6:	8d e6       	ldi	r24, 0x6D	; 109
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 4be:	8f e3       	ldi	r24, 0x3F	; 63
 4c0:	9c e9       	ldi	r25, 0x9C	; 156
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <main+0x4a>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <main+0x50>
 4c8:	00 00       	nop
    _delay_ms(10);
    LCD_GoTo(1,11);
 4ca:	6b e0       	ldi	r22, 0x0B	; 11
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
    LCD_WriteString("RPM");
 4d6:	84 e7       	ldi	r24, 0x74	; 116
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 4de:	8f e3       	ldi	r24, 0x3F	; 63
 4e0:	9c e9       	ldi	r25, 0x9C	; 156
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <main+0x6a>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <main+0x70>
 4e8:	00 00       	nop
    _delay_ms(10);
	
	Uart_init(9600);
 4ea:	60 e8       	ldi	r22, 0x80	; 128
 4ec:	75 e2       	ldi	r23, 0x25	; 37
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 4f 03 	call	0x69e	; 0x69e <Uart_init>
	
	
	
    while (1) 
    {
		adc_valueX = read_adc(0);
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 30 02 	call	0x460	; 0x460 <read_adc>
 4fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x1>
 500:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
		adc_valueY = read_adc(1);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 30 02 	call	0x460	; 0x460 <read_adc>
 50a:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <adc_valueY+0x1>
 50e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <adc_valueY>
		
		if ((adc_valueX > 550) && (470 < adc_valueY < 550))
 512:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <__data_end>
 516:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <__data_end+0x1>
 51a:	27 32       	cpi	r18, 0x27	; 39
 51c:	42 e0       	ldi	r20, 0x02	; 2
 51e:	34 07       	cpc	r19, r20
 520:	20 f1       	brcs	.+72     	; 0x56a <main+0xf2>
		{
			LCD_GoTo(0,11);
 522:	6b e0       	ldi	r22, 0x0B	; 11
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("F");
 52e:	88 e7       	ldi	r24, 0x78	; 120
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 536:	8f e3       	ldi	r24, 0x3F	; 63
 538:	9c e9       	ldi	r25, 0x9C	; 156
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <main+0xc2>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0xc8>
 540:	00 00       	nop
			_delay_ms(10);
			LCD_GoTo(1,7);
 542:	67 e0       	ldi	r22, 0x07	; 7
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("255");
 54e:	8a e7       	ldi	r24, 0x7A	; 122
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 556:	8f e3       	ldi	r24, 0x3F	; 63
 558:	9c e9       	ldi	r25, 0x9C	; 156
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <main+0xe2>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0xe8>
 560:	00 00       	nop
			_delay_ms(10);
			
			UART_send_byte(0b00000001);
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	0e 94 70 03 	call	0x6e0	; 0x6e0 <UART_send_byte>
 568:	c6 cf       	rjmp	.-116    	; 0x4f6 <main+0x7e>
		}
		else if ((adc_valueX < 470) && (470 < adc_valueY < 550))
 56a:	26 3d       	cpi	r18, 0xD6	; 214
 56c:	31 40       	sbci	r19, 0x01	; 1
 56e:	20 f5       	brcc	.+72     	; 0x5b8 <main+0x140>
		{
			LCD_GoTo(0,11);
 570:	6b e0       	ldi	r22, 0x0B	; 11
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("B");
 57c:	8e e7       	ldi	r24, 0x7E	; 126
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 584:	8f e3       	ldi	r24, 0x3F	; 63
 586:	9c e9       	ldi	r25, 0x9C	; 156
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <main+0x110>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <main+0x116>
 58e:	00 00       	nop
			_delay_ms(10);
			LCD_GoTo(1,7);
 590:	67 e0       	ldi	r22, 0x07	; 7
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("255");
 59c:	8a e7       	ldi	r24, 0x7A	; 122
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 5a4:	8f e3       	ldi	r24, 0x3F	; 63
 5a6:	9c e9       	ldi	r25, 0x9C	; 156
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <main+0x130>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x136>
 5ae:	00 00       	nop
			_delay_ms(10);
			
			UART_send_byte(0b00000010);
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <UART_send_byte>
 5b6:	9f cf       	rjmp	.-194    	; 0x4f6 <main+0x7e>
		}
		else if ((adc_valueY > 550) && (470 < adc_valueX < 550))
 5b8:	87 32       	cpi	r24, 0x27	; 39
 5ba:	22 e0       	ldi	r18, 0x02	; 2
 5bc:	92 07       	cpc	r25, r18
 5be:	20 f1       	brcs	.+72     	; 0x608 <main+0x190>
		{
			LCD_GoTo(0,11);
 5c0:	6b e0       	ldi	r22, 0x0B	; 11
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("R");
 5cc:	80 e8       	ldi	r24, 0x80	; 128
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 5d4:	8f e3       	ldi	r24, 0x3F	; 63
 5d6:	9c e9       	ldi	r25, 0x9C	; 156
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <main+0x160>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <main+0x166>
 5de:	00 00       	nop
			_delay_ms(10);
			LCD_GoTo(1,7);
 5e0:	67 e0       	ldi	r22, 0x07	; 7
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("255");
 5ec:	8a e7       	ldi	r24, 0x7A	; 122
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 5f4:	8f e3       	ldi	r24, 0x3F	; 63
 5f6:	9c e9       	ldi	r25, 0x9C	; 156
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <main+0x180>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <main+0x186>
 5fe:	00 00       	nop
			_delay_ms(10);
			
			UART_send_byte(0b00000100);	
 600:	84 e0       	ldi	r24, 0x04	; 4
 602:	0e 94 70 03 	call	0x6e0	; 0x6e0 <UART_send_byte>
 606:	77 cf       	rjmp	.-274    	; 0x4f6 <main+0x7e>
		}
		else if ((adc_valueY < 470) && (470 < adc_valueX < 550))
 608:	86 3d       	cpi	r24, 0xD6	; 214
 60a:	91 40       	sbci	r25, 0x01	; 1
 60c:	20 f5       	brcc	.+72     	; 0x656 <main+0x1de>
		{
			LCD_GoTo(0,11);
 60e:	6b e0       	ldi	r22, 0x0B	; 11
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("L");
 61a:	82 e8       	ldi	r24, 0x82	; 130
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 622:	8f e3       	ldi	r24, 0x3F	; 63
 624:	9c e9       	ldi	r25, 0x9C	; 156
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <main+0x1ae>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <main+0x1b4>
 62c:	00 00       	nop
			_delay_ms(10);
			LCD_GoTo(1,7);
 62e:	67 e0       	ldi	r22, 0x07	; 7
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("255");
 63a:	8a e7       	ldi	r24, 0x7A	; 122
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 642:	8f e3       	ldi	r24, 0x3F	; 63
 644:	9c e9       	ldi	r25, 0x9C	; 156
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <main+0x1ce>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x1d4>
 64c:	00 00       	nop
			_delay_ms(10);
			
			UART_send_byte(0b00001000);	
 64e:	88 e0       	ldi	r24, 0x08	; 8
 650:	0e 94 70 03 	call	0x6e0	; 0x6e0 <UART_send_byte>
 654:	50 cf       	rjmp	.-352    	; 0x4f6 <main+0x7e>
		}
		else
		{
			LCD_GoTo(0,11);
 656:	6b e0       	ldi	r22, 0x0B	; 11
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("S");
 662:	84 e8       	ldi	r24, 0x84	; 132
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 66a:	8f e3       	ldi	r24, 0x3F	; 63
 66c:	9c e9       	ldi	r25, 0x9C	; 156
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <main+0x1f6>
 672:	00 c0       	rjmp	.+0      	; 0x674 <main+0x1fc>
 674:	00 00       	nop
			_delay_ms(10);
			LCD_GoTo(1,7);
 676:	67 e0       	ldi	r22, 0x07	; 7
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 10 02 	call	0x420	; 0x420 <LCD_GoTo>
			LCD_WriteString("000");
 682:	86 e8       	ldi	r24, 0x86	; 134
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_WriteString>
 68a:	8f e3       	ldi	r24, 0x3F	; 63
 68c:	9c e9       	ldi	r25, 0x9C	; 156
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <main+0x216>
 692:	00 c0       	rjmp	.+0      	; 0x694 <main+0x21c>
 694:	00 00       	nop
			_delay_ms(10);
			UART_send_byte(0b00010000);	
 696:	80 e1       	ldi	r24, 0x10	; 16
 698:	0e 94 70 03 	call	0x6e0	; 0x6e0 <UART_send_byte>
 69c:	2c cf       	rjmp	.-424    	; 0x4f6 <main+0x7e>

0000069e <Uart_init>:
 69e:	28 e1       	ldi	r18, 0x18	; 24
 6a0:	2a b9       	out	0x0a, r18	; 10
 6a2:	26 e8       	ldi	r18, 0x86	; 134
 6a4:	20 bd       	out	0x20, r18	; 32
 6a6:	dc 01       	movw	r26, r24
 6a8:	cb 01       	movw	r24, r22
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	aa 1f       	adc	r26, r26
 6b0:	bb 1f       	adc	r27, r27
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	aa 1f       	adc	r26, r26
 6b8:	bb 1f       	adc	r27, r27
 6ba:	9c 01       	movw	r18, r24
 6bc:	ad 01       	movw	r20, r26
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	44 1f       	adc	r20, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	22 0f       	add	r18, r18
 6c8:	33 1f       	adc	r19, r19
 6ca:	44 1f       	adc	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	74 e2       	ldi	r23, 0x24	; 36
 6d2:	84 ef       	ldi	r24, 0xF4	; 244
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__udivmodsi4>
 6da:	21 50       	subi	r18, 0x01	; 1
 6dc:	29 b9       	out	0x09, r18	; 9
 6de:	08 95       	ret

000006e0 <UART_send_byte>:
 6e0:	5d 9b       	sbis	0x0b, 5	; 11
 6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <UART_send_byte>
 6e4:	8c b9       	out	0x0c, r24	; 12
 6e6:	08 95       	ret

000006e8 <__udivmodsi4>:
 6e8:	a1 e2       	ldi	r26, 0x21	; 33
 6ea:	1a 2e       	mov	r1, r26
 6ec:	aa 1b       	sub	r26, r26
 6ee:	bb 1b       	sub	r27, r27
 6f0:	fd 01       	movw	r30, r26
 6f2:	0d c0       	rjmp	.+26     	; 0x70e <__udivmodsi4_ep>

000006f4 <__udivmodsi4_loop>:
 6f4:	aa 1f       	adc	r26, r26
 6f6:	bb 1f       	adc	r27, r27
 6f8:	ee 1f       	adc	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	a2 17       	cp	r26, r18
 6fe:	b3 07       	cpc	r27, r19
 700:	e4 07       	cpc	r30, r20
 702:	f5 07       	cpc	r31, r21
 704:	20 f0       	brcs	.+8      	; 0x70e <__udivmodsi4_ep>
 706:	a2 1b       	sub	r26, r18
 708:	b3 0b       	sbc	r27, r19
 70a:	e4 0b       	sbc	r30, r20
 70c:	f5 0b       	sbc	r31, r21

0000070e <__udivmodsi4_ep>:
 70e:	66 1f       	adc	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	1a 94       	dec	r1
 718:	69 f7       	brne	.-38     	; 0x6f4 <__udivmodsi4_loop>
 71a:	60 95       	com	r22
 71c:	70 95       	com	r23
 71e:	80 95       	com	r24
 720:	90 95       	com	r25
 722:	9b 01       	movw	r18, r22
 724:	ac 01       	movw	r20, r24
 726:	bd 01       	movw	r22, r26
 728:	cf 01       	movw	r24, r30
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
